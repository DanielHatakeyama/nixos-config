#!/usr/bin/env bash

# Home Manager Switch Wrapper
# This script wraps home-manager switch and provides a foundation for future automation

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REPO_DIR="$HOME/.config/home-manager"
BACKUP_ENABLED=${BACKUP_ENABLED:-false}
AUTO_COMMIT=${AUTO_COMMIT:-false}
AUTO_PUSH=${AUTO_PUSH:-false}
COMMIT_MESSAGE_PREFIX="[auto]"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if we're in a git repository
check_git_repo() {
    if ! git -C "$REPO_DIR" rev-parse --git-dir > /dev/null 2>&1; then
        print_error "Not a git repository. Run 'git init' first."
        return 1
    fi
    return 0
}

# Function to check for uncommitted changes
check_uncommitted_changes() {
    if ! git -C "$REPO_DIR" diff-index --quiet HEAD -- 2>/dev/null; then
        return 1
    fi
    return 0
}

# Function to auto-commit changes
auto_commit_changes() {
    if [[ "$AUTO_COMMIT" == "true" ]]; then
        print_status "Auto-committing changes..."
        
        # Stage all changes
        git -C "$REPO_DIR" add .
        
        # Generate commit message
        local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
        local commit_msg="${COMMIT_MESSAGE_PREFIX} Home Manager update - $timestamp"
        
        # Commit if there are changes to commit
        if ! git -C "$REPO_DIR" diff --cached --quiet; then
            git -C "$REPO_DIR" commit -m "$commit_msg"
            print_success "Changes committed: $commit_msg"
        else
            print_status "No changes to commit"
        fi
    fi
}

# Function to auto-push changes
auto_push_changes() {
    if [[ "$AUTO_PUSH" == "true" ]]; then
        print_status "Auto-pushing changes to remote..."
        
        # Check if remote exists
        if git -C "$REPO_DIR" remote get-url origin > /dev/null 2>&1; then
            git -C "$REPO_DIR" push origin main
            print_success "Changes pushed to remote"
        else
            print_warning "No remote 'origin' configured. Skipping push."
            print_status "To add a remote: git remote add origin <repository-url>"
        fi
    fi
}

# Function to create backup
create_backup() {
    if [[ "$BACKUP_ENABLED" == "true" ]]; then
        local backup_dir="$REPO_DIR/.backups/$(date '+%Y%m%d-%H%M%S')"
        print_status "Creating backup at $backup_dir"
        
        mkdir -p "$backup_dir"
        
        # Copy current configuration
        cp -r "$REPO_DIR"/{*.nix,modules,programs,config} "$backup_dir/" 2>/dev/null || true
        
        # Keep only the last 5 backups
        find "$REPO_DIR/.backups" -maxdepth 1 -type d -name "20*" | sort | head -n -5 | xargs rm -rf
        
        print_success "Backup created"
    fi
}

# Main function
main() {
    print_status "Home Manager Switch Wrapper"
    print_status "Repository: $REPO_DIR"
    
    # Change to repository directory
    cd "$REPO_DIR"
    
    # Check git repository status
    if check_git_repo; then
        print_status "Git repository detected"
        
        # Warn about uncommitted changes
        if ! check_uncommitted_changes; then
            print_warning "Uncommitted changes detected"
            if [[ "$AUTO_COMMIT" != "true" ]]; then
                print_status "Consider committing changes before applying configuration"
            fi
        fi
    else
        print_warning "Not a git repository. Version control features disabled."
    fi
    
    # Create backup if enabled
    create_backup
    
    # Test configuration first
    print_status "Testing Home Manager configuration..."
    if home-manager build; then
        print_success "Configuration test passed"
    else
        print_error "Configuration test failed. Aborting switch."
        exit 1
    fi
    
    # Apply configuration
    print_status "Applying Home Manager configuration..."
    if home-manager switch "$@"; then
        print_success "Home Manager configuration applied successfully"
    else
        print_error "Home Manager switch failed"
        exit 1
    fi
    
    # Git operations (if enabled and in git repo)
    if check_git_repo; then
        auto_commit_changes
        auto_push_changes
    fi
    
    print_success "Home Manager switch completed!"
    print_status "Next steps:"
    print_status "  - Test your applications"
    print_status "  - Commit any manual changes: git add . && git commit -m 'description'"
    print_status "  - Push to remote: git push origin main"
}

# Help function
show_help() {
    cat << EOF
Home Manager Switch Wrapper

Usage: $0 [OPTIONS] [HOME_MANAGER_ARGS]

OPTIONS:
    -h, --help          Show this help message
    --auto-commit       Enable automatic git commits
    --auto-push         Enable automatic git push
    --backup            Enable configuration backup
    --dry-run           Test configuration without applying

ENVIRONMENT VARIABLES:
    AUTO_COMMIT=true    Enable automatic commits
    AUTO_PUSH=true      Enable automatic push
    BACKUP_ENABLED=true Enable backups

Examples:
    $0                           # Basic switch
    $0 --auto-commit             # Switch and auto-commit
    $0 --auto-commit --auto-push # Switch, commit, and push
    AUTO_COMMIT=true $0          # Use environment variable

EOF
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        --auto-commit)
            AUTO_COMMIT=true
            shift
            ;;
        --auto-push)
            AUTO_PUSH=true
            shift
            ;;
        --backup)
            BACKUP_ENABLED=true
            shift
            ;;
        --dry-run)
            print_status "Dry run mode - testing configuration only"
            cd "$REPO_DIR"
            home-manager build
            exit $?
            ;;
        *)
            # Pass remaining arguments to home-manager
            break
            ;;
    esac
done

# Run main function
main "$@"
